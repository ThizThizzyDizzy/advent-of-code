"string.dssl" import
"math.dssl" import
/input "Sensor at x=545406, y=2945484: closest beacon is at x=772918, y=2626448\nSensor at x=80179, y=3385522: closest beacon is at x=772918, y=2626448\nSensor at x=2381966, y=3154542: closest beacon is at x=2475123, y=3089709\nSensor at x=2607868, y=1728571: closest beacon is at x=2715626, y=2000000\nSensor at x=746476, y=2796469: closest beacon is at x=772918, y=2626448\nSensor at x=911114, y=2487289: closest beacon is at x=772918, y=2626448\nSensor at x=2806673, y=3051666: closest beacon is at x=2475123, y=3089709\nSensor at x=1335361, y=3887240: closest beacon is at x=2505629, y=4282497\nSensor at x=2432913, y=3069935: closest beacon is at x=2475123, y=3089709\nSensor at x=1333433, y=35725: closest beacon is at x=1929144, y=529341\nSensor at x=2289207, y=1556729: closest beacon is at x=2715626, y=2000000\nSensor at x=2455525, y=3113066: closest beacon is at x=2475123, y=3089709\nSensor at x=3546858, y=3085529: closest beacon is at x=3629407, y=2984857\nSensor at x=3542939, y=2742086: closest beacon is at x=3629407, y=2984857\nSensor at x=2010918, y=2389107: closest beacon is at x=2715626, y=2000000\nSensor at x=3734968, y=3024964: closest beacon is at x=3629407, y=2984857\nSensor at x=2219206, y=337159: closest beacon is at x=1929144, y=529341\nSensor at x=1969253, y=890542: closest beacon is at x=1929144, y=529341\nSensor at x=3522991, y=3257032: closest beacon is at x=3629407, y=2984857\nSensor at x=2303155, y=3239124: closest beacon is at x=2475123, y=3089709\nSensor at x=2574308, y=111701: closest beacon is at x=1929144, y=529341\nSensor at x=14826, y=2490395: closest beacon is at x=772918, y=2626448\nSensor at x=3050752, y=2366125: closest beacon is at x=2715626, y=2000000\nSensor at x=3171811, y=2935106: closest beacon is at x=3629407, y=2984857\nSensor at x=3909938, y=1033557: closest beacon is at x=3493189, y=-546524\nSensor at x=1955751, y=452168: closest beacon is at x=1929144, y=529341\nSensor at x=2159272, y=614653: closest beacon is at x=1929144, y=529341\nSensor at x=3700981, y=2930103: closest beacon is at x=3629407, y=2984857\nSensor at x=3236266, y=3676457: closest beacon is at x=3373823, y=4223689\nSensor at x=3980003, y=3819278: closest beacon is at x=3373823, y=4223689\nSensor at x=1914391, y=723058: closest beacon is at x=1929144, y=529341\nSensor at x=474503, y=1200604: closest beacon is at x=-802154, y=776650\nSensor at x=2650714, y=3674470: closest beacon is at x=2505629, y=4282497\nSensor at x=1696740, y=586715: closest beacon is at x=1929144, y=529341\nSensor at x=3818789, y=2961752: closest beacon is at x=3629407, y=2984857" def
/xmin 999999999 def
/xmax -999999999 def
/sensors [ ] list def
/sensor { //adds a sensor
    /by exch def
    /bx exch def
    /radius exch def
    /y exch def
    /x exch def
    [ "x" x "y" y "radius" radius "bx" bx "by" by ] dict sensors exch add pop
} def
/maxx {
    /y exch def
    /sensor exch def
    sensor.x sensor.radius sensor.y y - abs exec - 2 * 1 + 2 // +
} def
/minx {
    /y exch def
    /sensor exch def
    sensor.x sensor.radius sensor.y y - abs exec - 2 * 1 + 2 // -
} def
/hass {
    /y exch def
    /x exch def
    /val false def
    /val2 true def
    sensors {
        /s exch def
        s.bx x == s.by y == & {
            /val2 false =
        } if
        s.x s.y x y taxi exec s.radius <= {
            /val true =
        } if
    } foreach
    val val2 &
} def
/gett {
    /y exch def
    /x exch def
    /sensor null def
    sensors {
        /s exch def
        s.x s.y x y taxi exec s.radius <= {
            /sensor s =
        } if
    } foreach
    sensor
} def
/taxi {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    x1 x2 - abs exec y1 y2 - abs exec +
} def
input '\n' split exec {
    "" exch ',' split exec { ~ } foreach
    "" exch ':' split exec { ~ } foreach
    /str exch ' ' split exec def
    /sx str[2] 2 substr exec int def
    /sy str[3] 2 substr exec int def
    /bx str[8] 2 substr exec int def
    /by str[9] 2 substr exec int def
    sx sy sx sy bx by taxi exec bx by sensor exec
} foreach
sensors {
    /sensor exch def
    /xmin xmin sensor 2000000 minx exec min exec def
    /xmax xmax sensor 2000000 maxx exec max exec def
} foreach
/c 0 def
/i xmin def
{
    i 2000000 gett exec
    dup null == { pop } {
        /s exch def
        s println
        /c s maxx exec s minx exec - +=
    } ifelse
    /i ++
    i xmax >= { break } if
} loop
c println

//BROKEN AND UNFINISHED; skipping DSSL for today; it's too slow and I don't want to spend all day on this